server:
  # 应用端口号为8201
  port: 8201

spring:
  # 关闭数据库自动装配,否则这些模块在启动的时候将抛出异常：Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured
  # 因为现在已经在febs-server-system模块里配置了数据源，所以之前在其配置文件里配置的，用于关闭数据源自动装配的配置需要删除掉
  # autoconfigure:
  #  exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
  application:
    # 服务名称为FEBS-Server-System
    name: FEBS-Server-System
  datasource:
    # 数据库连接池使用的是Hikari,Spring Boot2.0后官方推荐使用该连接池，特点是响应速度快
    dynamic:
      # 开启p6spy功能
      p6spy: true
      hikari:
        connection-timeout: 30000
        max-lifetime: 1800000
        max-pool-size: 15
        min-idle: 5
        connection-test-query: select 1
        pool-name: FebsHikariCP
      primary: base
      datasource:
        # 配置了一个名称为base的数据源
        # 如果要继续添加数据源的话只需要在spring.datasource.dynamic.datasource下继续添加即可
        base:
          username: root
          password: 1234
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://localhost:3306/rbac_cloud_base?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2b8
  boot:
    admin:
      client:
        # spring.boot.admin.client.url指定了SBA服务端地址
        url: http://localhost:8401
        # spring.boot.admin.client.username对应SBA服务端的用户名
        username: febs
        # spring.boot.admin.client.password对应SBA服务端的密码
        password: 123456

# info.**配置了SBA客户端的名称，描述和版本信息
info:
  app:
    name: ${spring.application.name}
    description: "@project.description@"
    version: "@project.version@"

management:
  endpoints:
    web:
      exposure:
        # management.endpoints.web.exposure.include='*'表示将SBA客户端的所有监控端点都暴露给SBA服务端
        include: '*'
  endpoint:
    health:
      # management.endpoint.health.show-details表示总是展示详细的健康信息
      show-details: ALWAYS

eureka:
  instance:
    # 向Eureka 服务端发送心跳的间隔时间，单位为秒，用于服务续约。这里配置为20秒，即每隔20秒向febs-register发送心跳，表明当前服务没有宕机；
    lease-renewal-interval-in-seconds: 20
  client:
    # 表示是否将服务注册到Eureka服务端
    register-with-eureka: true
    # 表示是否从Eureka服务端获取服务信息
    fetch-registry: true
    # 微服务更新实例信息的变化到Eureka服务端的间隔时间，单位为秒，这里指定为30秒（这就是微服务启动后，要过一会才能注册到Eureka服务端的原因）
    instance-info-replication-interval-seconds: 30
    serviceUrl:
      # 指定Eureka服务端的地址，这里为当前项目地址 http://localhost:8001/register/eureka/
      defaultZone: http://febs:123456@localhost:8001/register/eureka/

# oauth2相关配置
security:
  oauth2:
    resource:
      id: ${spring.application.name}
      # 路径为http://localhost:8301/auth/user，通过微服务网关，该请求将被转发到http://localhost:8101/user
      # 到认证服务器里校验当前请求头中的令牌是否为合法的令牌
      # 通过当前令牌获取对应的用户信息
      user-info-uri: http://localhost:8301/auth/user

# mybatis-plus
mybatis-plus:
  # 指定别名扫描路径，这个路径后续在febs-common模块里定义，该路径下的实体类将自动配置别名，默认为类名首字母小写。配置别名后，便可以直接在MyBatis XML文件里使用了
  type-aliases-package: com.javaboy.febs.common.entity.system
  # 指定MyBatis XML文件路径
  mapper-locations: classpath:mapper/*/*.xml
  configuration:
    # 指定为null，否则再插入空值时会报“无效的列类型”错误
    jdbc-type-for-null: null
  global-config:
    # 设置为false关闭MyBatis Plus Banner打印
    banner: false